-> You learned that Angular components display data.
-> You used the double curly braces of interpolation to display the app title.

--------------------------------------------------------------------------------------------------------------------------------------------
Two-way binding
  -> Users should be able to edit the hero name in an <input> textbox.
  -> The textbox should both display the hero's name property and
      update that property as the user types.
      That means data flows from the component class out to the screen and
      from the screen back to the class.
  -> To automate that data flow, setup a two-way data binding between the <input> form element and the hero.name property.
  -> [(ngModel)] is Angular's two-way data binding syntax.

-> You used the CLI to create a second HeroesComponent.
->  You displayed the HeroesComponent by adding it to the AppComponent shell.
->  You applied the UppercasePipe to format the name.
->  You used two-way data binding with the ngModel directive.
->  You learned about the AppModule.
->  You imported the FormsModule in the AppModule so that Angular would recognize and apply the ngModel directive.
->  You learned the importance of declaring components in the AppModule and appreciated that the CLI declared it for you.

--------------------------------------------------------------------------------------------------------------------------------------------
The *ngFor is Angular's repeater directive. It repeats the host element for each element in a list.
  -> The syntax in this example is as follows:
    -> <li> is the host element.
    -> heroes holds the mock heroes list from the HeroesComponent class, the mock heroes list.
    -> hero holds the current hero object for each iteration through the list.

<li *ngFor="let hero of heroes" (click)="onSelect(hero)">
  -> This is an example of Angular's event binding syntax.
  -> The parentheses around click tell Angular to listen for the <li> element's click event.
      When the user clicks in the <li>, Angular executes the onSelect(hero) expression.

The Angular class binding makes it easy to add and remove a CSS class conditionally. Just add
[class.some-css-class]="some-condition" to the element you want to style.


-> The Tour of Heroes app displays a list of heroes in a Master/Detail view.
-> The user can select a hero and see that hero's details.
-> You used *ngFor to display a list.
-> You used *ngIf to conditionally include or exclude a block of HTML.
-> You can toggle a CSS style class with a class binding.


--------------------------------------------------------------------------------------------------------------------------------------------
one way data binding
  -> [hero]="selectedHero" is an Angular 'property binding'.
  -> It's a 'one way data binding' from the 'selectedHero' property of the 'HeroesComponent' to the
      'hero' property of the target element,
      which maps to the 'hero' property of the 'HeroDetailComponent'.
  -> Now when the user clicks a 'hero' in the list, the 'selectedHero' changes.
      When the 'selectedHero' changes, the 'property binding' updates 'hero' and the 'HeroDetailComponent' displays the new hero.

  -> The two components will have a 'parent/child' relationship.
      The parent 'HeroesComponent' will control the child 'HeroDetailComponent'
      by sending it a new hero to display whenever the user selects a hero from the list.

-> You created a separate, reusable HeroDetailComponent.
-> You used a 'property binding' to give the parent HeroesComponent control over the child HeroDetailComponent.
-> You used the '@Input' decorator to make the hero property available for binding by the external HeroesComponent.


--------------------------------------------------------------------------------------------------------------------------------------------
Why services?
Components shouldn't fetch or save data directly and they certainly shouldn't knowingly present fake data.
They should focus on presenting data and delegate data access to a service.
You'll create a HeroService that all application classes can use to get heroes.
Services are a great way to share information among classes that don't know each other.

@Injectable() services
Notice that the new service imports the Angular Injectable symbol and
annotates the class with the @Injectable() decorator.
This marks the class as one that participates in the dependency injection system.

Provide the HeroService
-> You must make the HeroService available to the dependency injection system before Angular can inject it into the HeroesComponent
    by registering a provider.
-> A provider is something that can create or deliver a service; in this case,
    it instantiates the HeroService class to provide the service.
-> To make sure that the HeroService can provide this service,
    register it with the injector,
    which is the object that is responsible for choosing and injecting the provider where the app requires it.
-> By default, the Angular CLI command ng generate service
    registers a provider with the root injector for your service by including provider metadata,
    that is providedIn: 'root' in the @Injectable() decorator.
      @Injectable({
        providedIn: 'root',
      })
-> When you provide the service at the root level,
    Angular creates a single, shared instance of HeroService and injects into any class that asks for it.
    Registering the provider in the @Injectable metadata also allows Angular to optimize an app by removing the service
    if it turns out not to be used after all.

constructor
-> While you could call getHeroes() in the constructor, that's not the best practice.
-> Reserve the constructor for simple initialization such as wiring constructor parameters to properties.
    The constructor shouldn't do anything.
    It certainly shouldn't call a function that makes HTTP requests to a remote server as a real data service would.
-> Instead, call getHeroes() inside the ngOnInit lifecycle hook and
    let Angular call ngOnInit() at an appropriate time after constructing a HeroesComponent instance.

Observable HeroService
import { Observable, of } from 'rxjs';
getHeroes(): Observable<Hero[]> {
  return of(HEROES);
}
-> of(HEROES) returns an Observable<Hero[]> that emits a single value, the array of mock heroes.

Subscribe in HeroesComponent
getHeroes(): void {
  this.heroes = this.heroService.getHeroes();
}
-> The previous version assigns an array of heroes to the component's heroes property.
-> The assignment occurs
    synchronously,
    as if the server could return heroes instantly or the browser could freeze the UI while it waited for the server's response.
-> That won't work when the HeroService is actually making requests of a remote server.

getHeroes(): void {
  this.heroService.getHeroes()
      .subscribe(heroes => this.heroes = heroes);
}
-> The new version waits for the Observable to emit the array of heroesâ€”which could happen now or several minutes from now.
    The subscribe() method passes the emitted array to the callback, which sets the component's heroes property.
-> This asynchronous approach will work when the HeroService requests heroes from the server.

-> You refactored data access to the HeroService class.
-> You registered the HeroService as the provider of its service at the root level so that it can be injected anywhere in the app.
-> You used Angular Dependency Injection to inject it into a component.
-> You gave the HeroService get data method an asynchronous signature.
-> You discovered Observable and the RxJS Observable library.
-> You used RxJS of() to return an observable of mock heroes (Observable<Hero[]>).
    The component's ngOnInit lifecycle hook calls the HeroService method, not the constructor.
-> You created a MessageService for loosely-coupled communication between classes.
    The HeroService injected into a component is created with another injected service, MessageService.
--------------------------------------------------------------------------------------------------------------------------------------------


